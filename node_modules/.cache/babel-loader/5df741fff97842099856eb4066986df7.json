{"ast":null,"code":"/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport createDOMProps from '../createDOMProps';\nimport findNodeHandle from '../../exports/findNodeHandle';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport UIManager from '../../exports/UIManager';\nvar NativeMethodsMixin = {\n  /**\r\n   * Removes focus from an input or view. This is the opposite of `focus()`.\r\n   */\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n\n  /**\r\n   * Requests focus for the given input or view.\r\n   * The exact behavior triggered will depend the type of view.\r\n   */\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n\n  /**\r\n   * Determines the position and dimensions of the view\r\n   */\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n\n  /**\r\n   * Determines the location of the given view in the window and returns the\r\n   * values via an async callback. If the React root view is embedded in\r\n   * another native view, this will give you the absolute coordinates. If\r\n   * successful, the callback will be called be called with the following\r\n   * arguments:\r\n   *\r\n   *  - x\r\n   *  - y\r\n   *  - width\r\n   *  - height\r\n   *\r\n   * Note that these measurements are not available until after the rendering\r\n   * has been completed.\r\n   */\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n\n  /**\r\n   * Measures the view relative to another view (usually an ancestor)\r\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n\n  /**\r\n   * This function sends props straight to the underlying DOM node.\r\n   * This works as if all styles were set as inline styles. Since a DOM node\r\n   * may aleady be styled with class names and inline styles, we need to get\r\n   * the initial styles from the DOM node and merge them with incoming props.\r\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = findNodeHandle(this);\n\n    if (node) {\n      // Next state is determined by comparison to existing state (in the DOM).\n      // Existing state has already gone through i18n transform\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\nexport default NativeMethodsMixin;","map":null,"metadata":{},"sourceType":"module"}