{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n * @preventMunge\r\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { AnimatedEvent, attachNativeEvent } from './AnimatedEvent';\nimport AnimatedAddition from './nodes/AnimatedAddition';\nimport AnimatedDiffClamp from './nodes/AnimatedDiffClamp';\nimport AnimatedDivision from './nodes/AnimatedDivision';\nimport AnimatedInterpolation from './nodes/AnimatedInterpolation';\nimport AnimatedModulo from './nodes/AnimatedModulo';\nimport AnimatedMultiplication from './nodes/AnimatedMultiplication';\nimport AnimatedNode from './nodes/AnimatedNode';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport AnimatedTracking from './nodes/AnimatedTracking';\nimport AnimatedValue from './nodes/AnimatedValue';\nimport AnimatedValueXY from './nodes/AnimatedValueXY';\nimport DecayAnimation from './animations/DecayAnimation';\nimport SpringAnimation from './animations/SpringAnimation';\nimport TimingAnimation from './animations/TimingAnimation';\nimport createAnimatedComponent from './createAnimatedComponent';\n\nvar add = function add(a, b) {\n  return new AnimatedAddition(a, b);\n};\n\nvar divide = function divide(a, b) {\n  return new AnimatedDivision(a, b);\n};\n\nvar multiply = function multiply(a, b) {\n  return new AnimatedMultiplication(a, b);\n};\n\nvar modulo = function modulo(a, modulus) {\n  return new AnimatedModulo(a, modulus);\n};\n\nvar diffClamp = function diffClamp(a, min, max) {\n  return new AnimatedDiffClamp(a, min, max);\n};\n\nvar _combineCallbacks = function _combineCallbacks(callback, config) {\n  if (callback && config.onComplete) {\n    return function () {\n      config.onComplete && config.onComplete.apply(config, arguments);\n      callback && callback.apply(void 0, arguments);\n    };\n  } else {\n    return callback || config.onComplete;\n  }\n};\n\nvar maybeVectorAnim = function maybeVectorAnim(value, config, anim) {\n  if (value instanceof AnimatedValueXY) {\n    var configX = _objectSpread({}, config);\n\n    var configY = _objectSpread({}, config);\n\n    for (var key in config) {\n      var _config$key = config[key],\n          x = _config$key.x,\n          y = _config$key.y;\n\n      if (x !== undefined && y !== undefined) {\n        configX[key] = x;\n        configY[key] = y;\n      }\n    }\n\n    var aX = anim(value.x, configX);\n    var aY = anim(value.y, configY); // We use `stopTogether: false` here because otherwise tracking will break\n    // because the second animation will get stopped before it can update.\n\n    return parallel([aX, aY], {\n      stopTogether: false\n    });\n  }\n\n  return null;\n};\n\nvar spring = function spring(value, config) {\n  var _start = function start(animatedValue, configuration, callback) {\n    callback = _combineCallbacks(callback, configuration);\n    var singleValue = animatedValue;\n    var singleConfig = configuration;\n    singleValue.stopTracking();\n\n    if (configuration.toValue instanceof AnimatedNode) {\n      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));\n    } else {\n      singleValue.animate(new SpringAnimation(singleConfig), callback);\n    }\n  };\n\n  return maybeVectorAnim(value, config, spring) || {\n    start: function start(callback) {\n      _start(value, config, callback);\n    },\n    stop: function stop() {\n      value.stopAnimation();\n    },\n    reset: function reset() {\n      value.resetAnimation();\n    },\n    _startNativeLoop: function _startNativeLoop(iterations) {\n      var singleConfig = _objectSpread({}, config, {\n        iterations: iterations\n      });\n\n      _start(value, singleConfig);\n    },\n    _isUsingNativeDriver: function _isUsingNativeDriver() {\n      return config.useNativeDriver || false;\n    }\n  };\n};\n\nvar timing = function timing(value, config) {\n  var _start2 = function start(animatedValue, configuration, callback) {\n    callback = _combineCallbacks(callback, configuration);\n    var singleValue = animatedValue;\n    var singleConfig = configuration;\n    singleValue.stopTracking();\n\n    if (configuration.toValue instanceof AnimatedNode) {\n      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));\n    } else {\n      singleValue.animate(new TimingAnimation(singleConfig), callback);\n    }\n  };\n\n  return maybeVectorAnim(value, config, timing) || {\n    start: function start(callback) {\n      _start2(value, config, callback);\n    },\n    stop: function stop() {\n      value.stopAnimation();\n    },\n    reset: function reset() {\n      value.resetAnimation();\n    },\n    _startNativeLoop: function _startNativeLoop(iterations) {\n      var singleConfig = _objectSpread({}, config, {\n        iterations: iterations\n      });\n\n      _start2(value, singleConfig);\n    },\n    _isUsingNativeDriver: function _isUsingNativeDriver() {\n      return config.useNativeDriver || false;\n    }\n  };\n};\n\nvar decay = function decay(value, config) {\n  var _start3 = function start(animatedValue, configuration, callback) {\n    callback = _combineCallbacks(callback, configuration);\n    var singleValue = animatedValue;\n    var singleConfig = configuration;\n    singleValue.stopTracking();\n    singleValue.animate(new DecayAnimation(singleConfig), callback);\n  };\n\n  return maybeVectorAnim(value, config, decay) || {\n    start: function start(callback) {\n      _start3(value, config, callback);\n    },\n    stop: function stop() {\n      value.stopAnimation();\n    },\n    reset: function reset() {\n      value.resetAnimation();\n    },\n    _startNativeLoop: function _startNativeLoop(iterations) {\n      var singleConfig = _objectSpread({}, config, {\n        iterations: iterations\n      });\n\n      _start3(value, singleConfig);\n    },\n    _isUsingNativeDriver: function _isUsingNativeDriver() {\n      return config.useNativeDriver || false;\n    }\n  };\n};\n\nvar sequence = function sequence(animations) {\n  var current = 0;\n  return {\n    start: function start(callback) {\n      var onComplete = function onComplete(result) {\n        if (!result.finished) {\n          callback && callback(result);\n          return;\n        }\n\n        current++;\n\n        if (current === animations.length) {\n          callback && callback(result);\n          return;\n        }\n\n        animations[current].start(onComplete);\n      };\n\n      if (animations.length === 0) {\n        callback && callback({\n          finished: true\n        });\n      } else {\n        animations[current].start(onComplete);\n      }\n    },\n    stop: function stop() {\n      if (current < animations.length) {\n        animations[current].stop();\n      }\n    },\n    reset: function reset() {\n      animations.forEach(function (animation, idx) {\n        if (idx <= current) {\n          animation.reset();\n        }\n      });\n      current = 0;\n    },\n    _startNativeLoop: function _startNativeLoop() {\n      throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');\n    },\n    _isUsingNativeDriver: function _isUsingNativeDriver() {\n      return false;\n    }\n  };\n};\n\nvar parallel = function parallel(animations, config) {\n  var doneCount = 0; // Make sure we only call stop() at most once for each animation\n\n  var hasEnded = {};\n  var stopTogether = !(config && config.stopTogether === false);\n  var result = {\n    start: function start(callback) {\n      if (doneCount === animations.length) {\n        callback && callback({\n          finished: true\n        });\n        return;\n      }\n\n      animations.forEach(function (animation, idx) {\n        var cb = function cb(endResult) {\n          hasEnded[idx] = true;\n          doneCount++;\n\n          if (doneCount === animations.length) {\n            doneCount = 0;\n            callback && callback(endResult);\n            return;\n          }\n\n          if (!endResult.finished && stopTogether) {\n            result.stop();\n          }\n        };\n\n        if (!animation) {\n          cb({\n            finished: true\n          });\n        } else {\n          animation.start(cb);\n        }\n      });\n    },\n    stop: function stop() {\n      animations.forEach(function (animation, idx) {\n        !hasEnded[idx] && animation.stop();\n        hasEnded[idx] = true;\n      });\n    },\n    reset: function reset() {\n      animations.forEach(function (animation, idx) {\n        animation.reset();\n        hasEnded[idx] = false;\n        doneCount = 0;\n      });\n    },\n    _startNativeLoop: function _startNativeLoop() {\n      throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');\n    },\n    _isUsingNativeDriver: function _isUsingNativeDriver() {\n      return false;\n    }\n  };\n  return result;\n};\n\nvar delay = function delay(time) {\n  // Would be nice to make a specialized implementation\n  return timing(new AnimatedValue(0), {\n    toValue: 0,\n    delay: time,\n    duration: 0\n  });\n};\n\nvar stagger = function stagger(time, animations) {\n  return parallel(animations.map(function (animation, i) {\n    return sequence([delay(time * i), animation]);\n  }));\n};\n\nvar loop = function loop(animation, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$iterations = _ref.iterations,\n      iterations = _ref$iterations === void 0 ? -1 : _ref$iterations;\n\n  var isFinished = false;\n  var iterationsSoFar = 0;\n  return {\n    start: function start(callback) {\n      var restart = function restart(result) {\n        if (result === void 0) {\n          result = {\n            finished: true\n          };\n        }\n\n        if (isFinished || iterationsSoFar === iterations || result.finished === false) {\n          callback && callback(result);\n        } else {\n          iterationsSoFar++;\n          animation.reset();\n          animation.start(restart);\n        }\n      };\n\n      if (!animation || iterations === 0) {\n        callback && callback({\n          finished: true\n        });\n      } else {\n        if (animation._isUsingNativeDriver()) {\n          animation._startNativeLoop(iterations);\n        } else {\n          restart(); // Start looping recursively on the js thread\n        }\n      }\n    },\n    stop: function stop() {\n      isFinished = true;\n      animation.stop();\n    },\n    reset: function reset() {\n      iterationsSoFar = 0;\n      isFinished = false;\n      animation.reset();\n    },\n    _startNativeLoop: function _startNativeLoop() {\n      throw new Error('Loops run using the native driver cannot contain Animated.loop animations');\n    },\n    _isUsingNativeDriver: function _isUsingNativeDriver() {\n      return animation._isUsingNativeDriver();\n    }\n  };\n};\n\nfunction forkEvent(event, listener) {\n  if (!event) {\n    return listener;\n  } else if (event instanceof AnimatedEvent) {\n    event.__addListener(listener);\n\n    return event;\n  } else {\n    return function () {\n      typeof event === 'function' && event.apply(void 0, arguments);\n      listener.apply(void 0, arguments);\n    };\n  }\n}\n\nfunction unforkEvent(event, listener) {\n  if (event && event instanceof AnimatedEvent) {\n    event.__removeListener(listener);\n  }\n}\n\nvar event = function event(argMapping, config) {\n  var animatedEvent = new AnimatedEvent(argMapping, config);\n\n  if (animatedEvent.__isNative) {\n    return animatedEvent;\n  } else {\n    return animatedEvent.__getHandler();\n  }\n};\n/**\r\n * The `Animated` library is designed to make animations fluid, powerful, and\r\n * easy to build and maintain. `Animated` focuses on declarative relationships\r\n * between inputs and outputs, with configurable transforms in between, and\r\n * simple `start`/`stop` methods to control time-based animation execution.\r\n *\r\n * See http://facebook.github.io/react-native/docs/animated.html\r\n */\n\n\nvar AnimatedImplementation = {\n  /**\r\n   * Standard value class for driving animations.  Typically initialized with\r\n   * `new Animated.Value(0);`\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#value\r\n   */\n  Value: AnimatedValue,\n\n  /**\r\n   * 2D value class for driving 2D animations, such as pan gestures.\r\n   *\r\n   * See https://facebook.github.io/react-native/releases/next/docs/animatedvaluexy.html\r\n   */\n  ValueXY: AnimatedValueXY,\n\n  /**\r\n   * Exported to use the Interpolation type in flow.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#interpolation\r\n   */\n  Interpolation: AnimatedInterpolation,\n\n  /**\r\n   * Exported for ease of type checking. All animated values derive from this\r\n   * class.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#node\r\n   */\n  Node: AnimatedNode,\n\n  /**\r\n   * Animates a value from an initial velocity to zero based on a decay\r\n   * coefficient.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#decay\r\n   */\n  decay: decay,\n\n  /**\r\n   * Animates a value along a timed easing curve. The Easing module has tons of\r\n   * predefined curves, or you can use your own function.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#timing\r\n   */\n  timing: timing,\n\n  /**\r\n   * Animates a value according to an analytical spring model based on\r\n   * damped harmonic oscillation.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#spring\r\n   */\n  spring: spring,\n\n  /**\r\n   * Creates a new Animated value composed from two Animated values added\r\n   * together.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#add\r\n   */\n  add: add,\n\n  /**\r\n   * Creates a new Animated value composed by dividing the first Animated value\r\n   * by the second Animated value.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#divide\r\n   */\n  divide: divide,\n\n  /**\r\n   * Creates a new Animated value composed from two Animated values multiplied\r\n   * together.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#multiply\r\n   */\n  multiply: multiply,\n\n  /**\r\n   * Creates a new Animated value that is the (non-negative) modulo of the\r\n   * provided Animated value.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#modulo\r\n   */\n  modulo: modulo,\n\n  /**\r\n   * Create a new Animated value that is limited between 2 values. It uses the\r\n   * difference between the last value so even if the value is far from the\r\n   * bounds it will start changing when the value starts getting closer again.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#diffclamp\r\n   */\n  diffClamp: diffClamp,\n\n  /**\r\n   * Starts an animation after the given delay.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#delay\r\n   */\n  delay: delay,\n\n  /**\r\n   * Starts an array of animations in order, waiting for each to complete\r\n   * before starting the next. If the current running animation is stopped, no\r\n   * following animations will be started.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#sequence\r\n   */\n  sequence: sequence,\n\n  /**\r\n   * Starts an array of animations all at the same time. By default, if one\r\n   * of the animations is stopped, they will all be stopped. You can override\r\n   * this with the `stopTogether` flag.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#parallel\r\n   */\n  parallel: parallel,\n\n  /**\r\n   * Array of animations may run in parallel (overlap), but are started in\r\n   * sequence with successive delays.  Nice for doing trailing effects.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#stagger\r\n   */\n  stagger: stagger,\n\n  /**\r\n   * Loops a given animation continuously, so that each time it reaches the\r\n   * end, it resets and begins again from the start.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#loop\r\n   */\n  loop: loop,\n\n  /**\r\n   * Takes an array of mappings and extracts values from each arg accordingly,\r\n   * then calls `setValue` on the mapped outputs.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#event\r\n   */\n  event: event,\n\n  /**\r\n   * Make any React component Animatable.  Used to create `Animated.View`, etc.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#createanimatedcomponent\r\n   */\n  createAnimatedComponent: createAnimatedComponent,\n\n  /**\r\n   * Imperative API to attach an animated value to an event on a view. Prefer\r\n   * using `Animated.event` with `useNativeDrive: true` if possible.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#attachnativeevent\r\n   */\n  attachNativeEvent: attachNativeEvent,\n\n  /**\r\n   * Advanced imperative API for snooping on animated events that are passed in\r\n   * through props. Use values directly where possible.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animated.html#forkevent\r\n   */\n  forkEvent: forkEvent,\n  unforkEvent: unforkEvent,\n  __PropsOnlyForTests: AnimatedProps\n};\nexport default AnimatedImplementation;","map":null,"metadata":{},"sourceType":"module"}