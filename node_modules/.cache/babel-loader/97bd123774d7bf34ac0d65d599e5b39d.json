{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @providesModule ListViewDataSource\r\n * \r\n * @format\r\n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from '../isEmpty';\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n/**\r\n * Provides efficient data processing and access to the\r\n * `ListView` component.  A `ListViewDataSource` is created with functions for\r\n * extracting data from the input blob, and comparing elements (with default\r\n * implementations for convenience).  The input blob can be as simple as an\r\n * array of strings, or an object with rows nested inside section objects.\r\n *\r\n * To update the data in the datasource, use `cloneWithRows` (or\r\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\r\n * data source is immutable, so you can't modify it directly.  The clone methods\r\n * suck in the new data and compute a diff for each row so ListView knows\r\n * whether to re-render it or not.\r\n *\r\n * In this example, a component receives data in chunks, handled by\r\n * `_onDataArrived`, which concats the new data onto the old data and updates the\r\n * data source.  We use `concat` to create a new array - mutating `this._data`,\r\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\r\n * understands the shape of the row data and knows how to efficiently compare\r\n * it.\r\n *\r\n * ```\r\n * getInitialState: function() {\r\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\r\n *   return {ds};\r\n * },\r\n * _onDataArrived(newData) {\r\n *   this._data = this._data.concat(newData);\r\n *   this.setState({\r\n *     ds: this.state.ds.cloneWithRows(this._data)\r\n *   });\r\n * }\r\n * ```\r\n */\n\n\nvar ListViewDataSource =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * You can provide custom extraction and `hasChanged` functions for section\r\n   * headers and rows.  If absent, data will be extracted with the\r\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\r\n   *\r\n   * The default extractor expects data of one of the following forms:\r\n   *\r\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\r\n   *\r\n   *    or\r\n   *\r\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\r\n   *\r\n   *    or\r\n   *\r\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\r\n   *\r\n   * The constructor takes in a params argument that can contain any of the\r\n   * following:\r\n   *\r\n   * - getRowData(dataBlob, sectionID, rowID);\r\n   * - getSectionHeaderData(dataBlob, sectionID);\r\n   * - rowHasChanged(prevRowData, nextRowData);\r\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\r\n   */\n  function ListViewDataSource(params) {\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0; // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n  /**\r\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\r\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\r\n   * construction an extractor to get the interesting information was defined\r\n   * (or the default was used).\r\n   *\r\n   * The `rowIdentities` is a 2D array of identifiers for rows.\r\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\r\n   * assumed that the keys of the section data are the row identities.\r\n   *\r\n   * Note: This function does NOT clone the data in this data source. It simply\r\n   * passes the functions defined at construction to a new data source with\r\n   * the data specified. If you wish to maintain the existing data you must\r\n   * handle merging of old and new data separately and then pass that into\r\n   * this function as the `dataBlob`.\r\n   */\n\n\n  var _proto = ListViewDataSource.prototype;\n\n  _proto.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n\n    return this.cloneWithRowsAndSections({\n      s1: dataBlob\n    }, ['s1'], rowIds);\n  }\n  /**\r\n   * This performs the same function as the `cloneWithRows` function but here\r\n   * you also specify what your `sectionIdentities` are. If you don't care\r\n   * about sections you should safely be able to use `cloneWithRows`.\r\n   *\r\n   * `sectionIdentities` is an array of identifiers for sections.\r\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\r\n   * of the data you wish to include.  If not provided, it's assumed that the\r\n   * keys of dataBlob are the section identities.\r\n   *\r\n   * Note: this returns a new object!\r\n   *\r\n   * ```\r\n   * const dataSource = ds.cloneWithRowsAndSections({\r\n   *   addresses: ['row 1', 'row 2'],\r\n   *   phone_numbers: ['data 1', 'data 2'],\r\n   * }, ['phone_numbers']);\r\n   * ```\r\n   */\n  ;\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  }\n  /**\r\n   * Returns the total number of rows in the data source.\r\n   *\r\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\r\n   */\n  ;\n\n  _proto.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  }\n  /**\r\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\r\n   *\r\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\r\n   */\n  ;\n\n  _proto.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  }\n  /**\r\n   * Returns if the row is dirtied and needs to be rerendered\r\n   */\n  ;\n\n  _proto.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  }\n  /**\r\n   * Gets the data required to render the row.\r\n   */\n  ;\n\n  _proto.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  }\n  /**\r\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\r\n   * or null of out of range indexes.\r\n   */\n  ;\n\n  _proto.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n\n    return null;\n  }\n  /**\r\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\r\n   * or null for out of range indexes.\r\n   */\n  ;\n\n  _proto.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n\n    return null;\n  }\n  /**\r\n   * Returns an array containing the number of rows in each section\r\n   */\n  ;\n\n  _proto.getSectionLengths = function getSectionLengths() {\n    var results = [];\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n\n    return results;\n  }\n  /**\r\n   * Returns if the section header is dirtied and needs to be rerendered\r\n   */\n  ;\n\n  _proto.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  }\n  /**\r\n   * Gets the data required to render the section header\r\n   */\n  ;\n\n  _proto.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  }\n  /**\r\n   * Private members and methods.\r\n   */\n  ;\n\n  _proto._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    // construct a hashmap of the existing (old) id arrays\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    } // compare the 2 identity array and get the dirtied rows\n\n\n    this._dirtySections = [];\n    this._dirtyRows = [];\n    var dirty;\n\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex]; // dirty if the sectionHeader is new or _sectionHasChanged is true\n\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex]; // dirty if the section is new, row is new or _rowHasChanged is true\n\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n\n  var result = {};\n\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n\n  return result;\n}\n\nexport default ListViewDataSource;","map":null,"metadata":{},"sourceType":"module"}