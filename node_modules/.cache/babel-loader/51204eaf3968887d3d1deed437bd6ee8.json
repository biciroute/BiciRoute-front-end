{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable react/prop-types */\n\n/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\n\n\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport BoundingDimensions from './BoundingDimensions';\nimport findNodeHandle from '../findNodeHandle';\nimport normalizeColor from 'normalize-css-color';\nimport Position from './Position';\nimport React from 'react';\nimport TouchEventUtils from 'fbjs/lib/TouchEventUtils';\nimport UIManager from '../UIManager';\nimport View from '../View';\n/**\r\n * `Touchable`: Taps done right.\r\n *\r\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\r\n * will measure time/geometry and tells you when to give feedback to the user.\r\n *\r\n * ====================== Touchable Tutorial ===============================\r\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\r\n * the geometry of elements, and observes when another responder (scroll view\r\n * etc) has stolen the touch lock. It notifies your component when it should\r\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\r\n *\r\n * - When a touch was activated (typically you highlight)\r\n * - When a touch was deactivated (typically you unhighlight)\r\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\r\n *   of the element, and no other element (like scroller) has \"stolen\" touch\r\n *   lock (\"responder\") (Typically you bounce the element).\r\n *\r\n * A good tap interaction isn't as simple as you might think. There should be a\r\n * slight delay before showing a highlight when starting a touch. If a\r\n * subsequent touch move exceeds the boundary of the element, it should\r\n * unhighlight, but if that same touch is brought back within the boundary, it\r\n * should rehighlight again. A touch can move in and out of that boundary\r\n * several times, each time toggling highlighting, but a \"press\" is only\r\n * triggered if that touch ends while within the element's boundary and no\r\n * scroller (or anything else) has stolen the lock on touches.\r\n *\r\n * To create a new type of component that handles interaction using the\r\n * `Touchable` mixin, do the following:\r\n *\r\n * - Initialize the `Touchable` state.\r\n *\r\n *   getInitialState: function() {\r\n *     return merge(this.touchableGetInitialState(), yourComponentState);\r\n *   }\r\n *\r\n * - Choose the rendered component who's touches should start the interactive\r\n *   sequence. On that rendered node, forward all `Touchable` responder\r\n *   handlers. You can choose any rendered node you like. Choose a node whose\r\n *   hit target you'd like to instigate the interaction sequence:\r\n *\r\n *   // In render function:\r\n *   return (\r\n *     <View\r\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\r\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\r\n *       onResponderGrant={this.touchableHandleResponderGrant}\r\n *       onResponderMove={this.touchableHandleResponderMove}\r\n *       onResponderRelease={this.touchableHandleResponderRelease}\r\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\r\n *       <View>\r\n *         Even though the hit detection/interactions are triggered by the\r\n *         wrapping (typically larger) node, we usually end up implementing\r\n *         custom logic that highlights this inner one.\r\n *       </View>\r\n *     </View>\r\n *   );\r\n *\r\n * - You may set up your own handlers for each of these events, so long as you\r\n *   also invoke the `touchable*` handlers inside of your custom handler.\r\n *\r\n * - Implement the handlers on your component class in order to provide\r\n *   feedback to the user. See documentation for each of these class methods\r\n *   that you should implement.\r\n *\r\n *   touchableHandlePress: function() {\r\n *      this.performBounceAnimation();  // or whatever you want to do.\r\n *   },\r\n *   touchableHandleActivePressIn: function() {\r\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\r\n *   },\r\n *   touchableHandleActivePressOut: function() {\r\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\r\n *   },\r\n *\r\n * - There are more advanced methods you can implement (see documentation below):\r\n *   touchableGetHighlightDelayMS: function() {\r\n *     return 20;\r\n *   }\r\n *   // In practice, *always* use a predeclared constant (conserve memory).\r\n *   touchableGetPressRectOffset: function() {\r\n *     return {top: 20, left: 20, right: 20, bottom: 100};\r\n *   }\r\n */\n\n/**\r\n * Touchable states.\r\n */\n\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR'\n};\n/**\r\n * Quick lookup map for states that are considered to be \"active\"\r\n */\n\nvar IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\n/**\r\n * Quick lookup for states that are considered to be \"pressing\" and are\r\n * therefore eligible to result in a \"selection\" if the press stops.\r\n */\n\nvar IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\nvar IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n};\n/**\r\n * Inputs to the state machine.\r\n */\n\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\n/**\r\n * Mapping from States x Signals => States\r\n */\n\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n}; // ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\n\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10; // Default amount \"active\" region protrudes beyond box\n\n/**\r\n * By convention, methods prefixed with underscores are meant to be @private,\r\n * and not @protected. Mixers shouldn't access them - not even to provide them\r\n * as callback handlers.\r\n *\r\n *\r\n * ========== Geometry =========\r\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\r\n * is an abstract box that is extended beyond the `HitRect`.\r\n *\r\n *  +--------------------------+\r\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\r\n *  |  +--------------------+  |   to become the responder.\r\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\r\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\r\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\r\n *  |  |  |              |  |  |   and before letting up, the Visual React\r\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\r\n *  |  |     HitRect        |  |   for being highlighted (so long as the\r\n *  |  +--------------------+  |   press remains in the `PressRect`).\r\n *  |        PressRect     o   |\r\n *  +----------------------|---+\r\n *           Out Region    |\r\n *                         +-----+ This gap between the `HitRect` and\r\n *                                 `PressRect` allows a touch to move far away\r\n *                                 from the original hit rect, and remain\r\n *                                 highlighted, and eligible for a \"Press\".\r\n *                                 Customize this via\r\n *                                 `touchableGetPressRectOffset()`.\r\n *\r\n *\r\n *\r\n * ======= State Machine =======\r\n *\r\n * +-------------+ <---+ RESPONDER_RELEASE\r\n * |NOT_RESPONDER|\r\n * +-------------+ <---+ RESPONDER_TERMINATED\r\n *     +\r\n *     | RESPONDER_GRANT (HitRect)\r\n *     v\r\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\r\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\r\n * +---------------------------+          +-------------------------+                +------------------------------+\r\n *     +            ^                         +           ^                                 +           ^\r\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\r\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\r\n *     |            |                         |           |                                 |           |\r\n *     v            +                         v           +                                 v           +\r\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\r\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\r\n * +----------------------------+         +--------------------------+               +-------------------------------+\r\n *\r\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\r\n *\r\n * Not drawn are the side effects of each transition. The most important side\r\n * effect is the `touchableHandlePress` abstract method invocation that occurs\r\n * when a responder is released while in either of the \"Press\" states.\r\n *\r\n * The other important side effects are the highlight abstract method\r\n * invocations (internal callbacks) to be implemented by the mixer.\r\n *\r\n *\r\n * @lends Touchable.prototype\r\n */\n\nvar TouchableMixin = {\n  // HACK (part 1): basic support for touchable interactions using a keyboard\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this._touchableNode = findNodeHandle(this);\n\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableBlurListener = function (e) {\n        if (_this._isTouchableKeyboardActive) {\n          if (_this.state.touchable.touchState && _this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            _this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n\n          _this._isTouchableKeyboardActive = false;\n        }\n      };\n\n      this._touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n\n  /**\r\n   * Clear all timeouts on unmount\r\n   */\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._touchableNode && this._touchableNode.addEventListener) {\n      this._touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\r\n   * It's prefer that mixins determine state in this way, having the class\r\n   * explicitly mix the state in the one and only `getInitialState` method.\r\n   *\r\n   * @return {object} State object to be placed inside of\r\n   * `this.state.touchable`.\r\n   */\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  // ==== Hooks to Gesture Responder system ====\n\n  /**\r\n   * Must return true if embedded in a native platform scroll view.\r\n   */\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\r\n   * Must return true to start the process of `Touchable`.\r\n   */\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n\n  /**\r\n   * Return true to cancel press on long press.\r\n   */\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n\n  /**\r\n   * Place as callback for a DOM element's `onResponderGrant` event.\r\n   */\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget; // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this.state.touchable.positionOnActivate = null;\n\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n\n  /**\r\n   * Place as callback for a DOM element's `onResponderRelease` event.\r\n   */\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\r\n   * Place as callback for a DOM element's `onResponderTerminate` event.\r\n   */\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\r\n   * Place as callback for a DOM element's `onResponderMove` event.\r\n   */\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    // Not enough time elapsed yet, wait for highlight -\n    // this is just a perf optimization.\n    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {\n      return;\n    } // Measurement may not have returned yet.\n\n\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  // ==== Abstract Application Callbacks ====\n\n  /**\r\n   * Invoked when the item should be highlighted. Mixers should implement this\r\n   * to visually distinguish the `VisualRect` so that the user knows that\r\n   * releasing a touch will result in a \"selection\" (analog to click).\r\n   *\r\n   * @abstract\r\n   * touchableHandleActivePressIn: function,\r\n   */\n\n  /**\r\n   * Invoked when the item is \"active\" (in that it is still eligible to become\r\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\r\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\r\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\r\n   * again and the mixer should probably highlight the `VisualRect` again. This\r\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\r\n   * the user is depressing the mouse/touch.\r\n   *\r\n   * @abstract\r\n   * touchableHandleActivePressOut: function\r\n   */\n\n  /**\r\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\r\n   * letting up while the item was either in the state\r\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\r\n   *\r\n   * @abstract\r\n   * touchableHandlePress: function\r\n   */\n\n  /**\r\n   * Invoked when the item is long pressed - meaning the interaction ended by\r\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\r\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\r\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\r\n   * default any `touchableHandlePress` callback will not be invoked. To\r\n   * override this default behavior, override `touchableLongPressCancelsPress`\r\n   * to return false. As a result, `touchableHandlePress` will be called when\r\n   * lifting up, even if `touchableHandleLongPress` has also been called.\r\n   *\r\n   * @abstract\r\n   * touchableHandleLongPress: function\r\n   */\n\n  /**\r\n   * Returns the number of millis to wait before triggering a highlight.\r\n   *\r\n   * @abstract\r\n   * touchableGetHighlightDelayMS: function\r\n   */\n\n  /**\r\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\r\n   * numbers mean the size expands outwards.\r\n   *\r\n   * @abstract\r\n   * touchableGetPressRectOffset: function\r\n   */\n  // ==== Internal Logic ====\n\n  /**\r\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\r\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\r\n   * should result in points that are in the same coordinate system as an\r\n   * event's `globalX/globalY` data values.\r\n   *\r\n   * - Consider caching this for the lifetime of the component, or possibly\r\n   *   being able to share this cache between any `ScrollMap` view.\r\n   *\r\n   * @sideeffects\r\n   * @private\r\n   */\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(x, y, width, height, globalX, globalY) {\n    // don't do anything if UIManager failed to measure node\n    if (!x && !y && !width && !height && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && // $FlowFixMe\n    BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY); // $FlowFixMe\n\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(width, height);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\r\n   * Receives a state machine signal, performs side effects of the transition\r\n   * and stores the new state. Validates the transition as well.\r\n   *\r\n   * @param {Signals} signal State machine signal.\r\n   * @throws Error if invalid state transition or unrecognized signal.\r\n   * @sideeffects\r\n   */\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n\n      get locationX() {\n        return touch && touch.locationX;\n      },\n\n      get locationY() {\n        return touch && touch.locationY;\n      }\n\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\r\n   * Will perform a transition between touchable states, and identify any\r\n   * highlighting or unhighlighting that must be performed for this particular\r\n   * transition.\r\n   *\r\n   * @param {States} curState Current Touchable state.\r\n   * @param {States} nextState Next Touchable state.\r\n   * @param {Signal} signal Signal that triggered the transition.\r\n   * @param {Event} e Native event.\r\n   * @sideeffects\r\n   */\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && ( // We *are* long pressing..\n      !hasLongPressHandler || // But either has no long handler\n      !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this2 = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this2.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  // HACK (part 2): basic support for touchable interactions using a keyboard (including\n  // delays and longPress)\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var ENTER = 13;\n    var SPACE = 32;\n    var type = e.type,\n        which = e.which;\n\n    if (which === ENTER || which === SPACE) {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n\n      e.stopPropagation(); // prevent the default behaviour unless the Touchable functions as a link\n      // and Enter is pressed\n\n      if (!(which === ENTER && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  }\n};\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  // Highlights all touchable targets. Toggle with Inspector.\n\n  /**\r\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\r\n   */\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Touchable.TOUCH_TARGET_DEBUG) {\n        return null;\n      }\n\n      var debugHitSlopStyle = {};\n      hitSlop = hitSlop || {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n      };\n\n      for (var key in hitSlop) {\n        debugHitSlopStyle[key] = -hitSlop[key];\n      }\n\n      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n      return React.createElement(View, {\n        pointerEvents: \"none\",\n        style: _objectSpread({\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55',\n          // More opaque\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F'\n        }, debugHitSlopStyle)\n      });\n    }\n  }\n};\nexport default Touchable;","map":null,"metadata":{},"sourceType":"module"}