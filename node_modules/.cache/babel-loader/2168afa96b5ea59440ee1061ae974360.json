{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\nimport PropTypes from 'prop-types';\nimport UIManager from '../../../exports/UIManager';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar checkPropTypes = PropTypes.checkPropTypes;\nvar Types = {\n  spring: 'spring',\n  linear: 'linear',\n  easeInEaseOut: 'easeInEaseOut',\n  easeIn: 'easeIn',\n  easeOut: 'easeOut',\n  keyboard: 'keyboard'\n};\nvar Properties = {\n  opacity: 'opacity',\n  scaleX: 'scaleX',\n  scaleY: 'scaleY',\n  scaleXY: 'scaleXY'\n};\nvar animType = PropTypes.shape({\n  duration: PropTypes.number,\n  delay: PropTypes.number,\n  springDamping: PropTypes.number,\n  initialVelocity: PropTypes.number,\n  type: PropTypes.oneOf(Object.keys(Types)).isRequired,\n  property: PropTypes.oneOf( // Only applies to create/delete\n  Object.keys(Properties))\n});\nvar configType = PropTypes.shape({\n  duration: PropTypes.number.isRequired,\n  create: animType,\n  update: animType,\n  delete: animType\n});\n\nfunction checkConfig(config, location, name) {\n  checkPropTypes({\n    config: configType\n  }, {\n    config: config\n  }, location, name);\n}\n\nfunction configureNext(config, onAnimationDidEnd) {\n  if (__DEV__) {\n    checkConfig(config, 'config', 'LayoutAnimation.configureNext');\n  }\n\n  UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {\n    /* unused */\n  });\n}\n\nfunction create(duration, type, creationProp) {\n  return {\n    duration: duration,\n    create: {\n      type: type,\n      property: creationProp\n    },\n    update: {\n      type: type\n    },\n    delete: {\n      type: type,\n      property: creationProp\n    }\n  };\n}\n\nvar Presets = {\n  easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),\n  linear: create(500, Types.linear, Properties.opacity),\n  spring: {\n    duration: 700,\n    create: {\n      type: Types.linear,\n      property: Properties.opacity\n    },\n    update: {\n      type: Types.spring,\n      springDamping: 0.4\n    },\n    delete: {\n      type: Types.linear,\n      property: Properties.opacity\n    }\n  }\n};\n/**\r\n * Automatically animates views to their new positions when the\r\n * next layout happens.\r\n *\r\n * A common way to use this API is to call it before calling `setState`.\r\n *\r\n * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:\r\n *\r\n *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\r\n */\n\nvar LayoutAnimation = {\n  /**\r\n   * Schedules an animation to happen on the next layout.\r\n   *\r\n   * @param config Specifies animation properties:\r\n   *\r\n   *   - `duration` in milliseconds\r\n   *   - `create`, config for animating in new views (see `Anim` type)\r\n   *   - `update`, config for animating views that have been updated\r\n   * (see `Anim` type)\r\n   *\r\n   * @param onAnimationDidEnd Called when the animation finished.\r\n   * Only supported on iOS.\r\n   * @param onError Called on error. Only supported on iOS.\r\n   */\n  configureNext: configureNext,\n\n  /**\r\n   * Helper for creating a config for `configureNext`.\r\n   */\n  create: create,\n  Types: Types,\n  Properties: Properties,\n  checkConfig: checkConfig,\n  Presets: Presets,\n  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),\n  linear: configureNext.bind(null, Presets.linear),\n  spring: configureNext.bind(null, Presets.spring)\n};\nexport default LayoutAnimation;","map":null,"metadata":{},"sourceType":"module"}