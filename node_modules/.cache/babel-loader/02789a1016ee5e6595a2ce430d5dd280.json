{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport InteractionManager from '../../../../exports/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\nvar _uniqueId = 1;\n/**\r\n * Animated works by building a directed acyclic graph of dependencies\r\n * transparently when you render your Animated components.\r\n *\r\n *               new Animated.Value(0)\r\n *     .interpolate()        .interpolate()    new Animated.Value(1)\r\n *         opacity               translateY      scale\r\n *          style                         transform\r\n *         View#234                         style\r\n *                                         View#123\r\n *\r\n * A) Top Down phase\r\n * When an Animated.Value is updated, we recursively go down through this\r\n * graph in order to find leaf nodes: the views that we flag as needing\r\n * an update.\r\n *\r\n * B) Bottom Up phase\r\n * When a view is flagged as needing an update, we recursively go back up\r\n * in order to build the new value that it needs. The reason why we need\r\n * this two-phases process is to deal with composite props such as\r\n * transform which can receive values from multiple parents.\r\n */\n\nfunction _flush(rootNode) {\n  var animatedStyles = new Set();\n\n  function findAnimatedStyles(node) {\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n\n  findAnimatedStyles(rootNode);\n  animatedStyles.forEach(function (animatedStyle) {\n    return animatedStyle.update();\n  });\n}\n/**\r\n * Standard value for driving animations.  One `Animated.Value` can drive\r\n * multiple properties in a synchronized fashion, but can only be driven by one\r\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\r\n * or calling `setValue`) will stop any previous ones.\r\n *\r\n * See http://facebook.github.io/react-native/docs/animatedvalue.html\r\n */\n\n\nvar AnimatedValue =\n/*#__PURE__*/\nfunction (_AnimatedWithChildren) {\n  _inheritsLoose(AnimatedValue, _AnimatedWithChildren);\n\n  function AnimatedValue(value) {\n    var _this;\n\n    _this = _AnimatedWithChildren.call(this) || this;\n    _this._startingValue = _this._value = value;\n    _this._offset = 0;\n    _this._animation = null;\n    _this._listeners = {};\n    return _this;\n  }\n\n  var _proto = AnimatedValue.prototype;\n\n  _proto.__detach = function __detach() {\n    this.stopAnimation();\n\n    _AnimatedWithChildren.prototype.__detach.call(this);\n  };\n\n  _proto.__getValue = function __getValue() {\n    return this._value + this._offset;\n  };\n\n  _proto.__makeNative = function __makeNative() {\n    _AnimatedWithChildren.prototype.__makeNative.call(this);\n\n    if (Object.keys(this._listeners).length) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n  /**\r\n   * Directly set the value.  This will stop any animations running on the value\r\n   * and update all the bound properties.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setvalue\r\n   */\n  ;\n\n  _proto.setValue = function setValue(value) {\n    if (this._animation) {\n      this._animation.stop();\n\n      this._animation = null;\n    }\n\n    this._updateValue(value, !this.__isNative\n    /* don't perform a flush for natively driven values */\n    );\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n  /**\r\n   * Sets an offset that is applied on top of whatever value is set, whether via\r\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\r\n   * things like the start of a pan gesture.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setoffset\r\n   */\n  ;\n\n  _proto.setOffset = function setOffset(offset) {\n    this._offset = offset;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n  /**\r\n   * Merges the offset value into the base value and resets the offset to zero.\r\n   * The final output of the value is unchanged.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#flattenoffset\r\n   */\n  ;\n\n  _proto.flattenOffset = function flattenOffset() {\n    this._value += this._offset;\n    this._offset = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\r\n   * Sets the offset value to the base value, and resets the base value to zero.\r\n   * The final output of the value is unchanged.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#extractoffset\r\n   */\n  ;\n\n  _proto.extractOffset = function extractOffset() {\n    this._offset += this._value;\n    this._value = 0;\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\r\n   * Adds an asynchronous listener to the value so you can observe updates from\r\n   * animations.  This is useful because there is no way to\r\n   * synchronously read the value because it might be driven natively.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#addlistener\r\n   */\n  ;\n\n  _proto.addListener = function addListener(callback) {\n    var id = String(_uniqueId++);\n    this._listeners[id] = callback;\n\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n\n    return id;\n  }\n  /**\r\n   * Unregister a listener. The `id` param shall match the identifier\r\n   * previously returned by `addListener()`.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removelistener\r\n   */\n  ;\n\n  _proto.removeListener = function removeListener(id) {\n    delete this._listeners[id];\n\n    if (this.__isNative && Object.keys(this._listeners).length === 0) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n  /**\r\n   * Remove all registered listeners.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removealllisteners\r\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners() {\n    this._listeners = {};\n\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  };\n\n  _proto._startListeningToNativeValueUpdates = function _startListeningToNativeValueUpdates() {\n    var _this2 = this;\n\n    if (this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {\n      if (data.tag !== _this2.__getNativeTag()) {\n        return;\n      }\n\n      _this2._updateValue(data.value, false\n      /* flush */\n      );\n    });\n  };\n\n  _proto._stopListeningForNativeValueUpdates = function _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n  /**\r\n   * Stops any running animation or tracking. `callback` is invoked with the\r\n   * final value after stopping the animation, which is useful for updating\r\n   * state to match the animation position with layout.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#stopanimation\r\n   */\n  ;\n\n  _proto.stopAnimation = function stopAnimation(callback) {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n  /**\r\n   * Stops any animation and resets the value to its original.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#resetanimation\r\n   */\n  ;\n\n  _proto.resetAnimation = function resetAnimation(callback) {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n  /**\r\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\r\n   * 0-10.\r\n   */\n  ;\n\n  _proto.interpolate = function interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  /**\r\n   * Typically only used internally, but could be used by a custom Animation\r\n   * class.\r\n   *\r\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#animate\r\n   */\n  ;\n\n  _proto.animate = function animate(animation, callback) {\n    var _this3 = this;\n\n    var handle = null;\n\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n\n    var previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(this._value, function (value) {\n      // Natively driven animations will never call into that callback, therefore we can always\n      // pass flush = true to allow the updated value to propagate to native with setNativeProps\n      _this3._updateValue(value, true\n      /* flush */\n      );\n    }, function (result) {\n      _this3._animation = null;\n\n      if (handle !== null) {\n        InteractionManager.clearInteractionHandle(handle);\n      }\n\n      callback && callback(result);\n    }, previousAnimation, this);\n  }\n  /**\r\n   * Typically only used internally.\r\n   */\n  ;\n\n  _proto.stopTracking = function stopTracking() {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n  /**\r\n   * Typically only used internally.\r\n   */\n  ;\n\n  _proto.track = function track(tracking) {\n    this.stopTracking();\n    this._tracking = tracking;\n  };\n\n  _proto._updateValue = function _updateValue(value, flush) {\n    this._value = value;\n\n    if (flush) {\n      _flush(this);\n    }\n\n    for (var _key in this._listeners) {\n      this._listeners[_key]({\n        value: this.__getValue()\n      });\n    }\n  };\n\n  _proto.__getNativeConfig = function __getNativeConfig() {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset\n    };\n  };\n\n  return AnimatedValue;\n}(AnimatedWithChildren);\n\nexport default AnimatedValue;","map":null,"metadata":{},"sourceType":"module"}